<!DOCTYPE html>
<html lang="ro">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= guild.name %> • Config</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-slate-950 text-slate-100 min-h-screen">
  <div class="max-w-5xl mx-auto p-6">
    <div class="flex items-center justify-between gap-4 mt-4 mb-6">
      <div class="flex items-center gap-4">
        <a href="/" class="inline-flex items-center gap-2 text-slate-400 hover:text-slate-200">← Înapoi</a>
        <% if (guild.iconURL()) { %>
          <img src="<%= guild.iconURL() %>" alt="icon" class="w-12 h-12 rounded-md shadow" />
        <% } else { %>
          <div class="w-12 h-12 rounded-md bg-slate-800"></div>
        <% } %>
        <div>
          <h1 class="text-2xl font-bold leading-tight"><%= guild.name %></h1>
          <div class="text-xs text-slate-400 mt-1">
            <% if (cfg.bannerFile) { %>
              <span class="px-2 py-0.5 rounded-full bg-emerald-500/15 text-emerald-300 border border-emerald-700/40">Sursă banner: Local</span>
            <% } else if (cfg.bannerUrl) { %>
              <span class="px-2 py-0.5 rounded-full bg-sky-500/15 text-sky-300 border border-sky-700/40">Sursă banner: URL</span>
            <% } else { %>
              <span class="px-2 py-0.5 rounded-full bg-slate-700/30 text-slate-300 border border-slate-700/60">Sursă banner: neconfigurat</span>
            <% } %>
          </div>
        </div>
      </div>
      <div class="flex items-center gap-3">
        <a href="/" class="text-slate-400 text-sm">Dashboard</a>
        <a href="/guild/<%= guild.id %>" class="text-slate-400 text-sm">Setări</a>
      </div>
    </div>

    <form action="/guild/<%= guild.id %>/save" method="post" class="bg-slate-900/60 border border-slate-800 rounded-xl p-6">
      <% if (!isAdmin) { %>
        <div class="text-sm text-yellow-300 mb-4">Nu ai permisiuni de administrator pentru a modifica setările acestui server.</div>
      <% } %>

      <div class="flex items-start justify-between mb-4">
        <div>
          <h3 class="text-lg font-semibold"><%= guild.name %> — Setări server</h3>
          <p class="text-xs text-slate-400">Grupăm setările pentru o navigare mai rapidă.</p>
        </div>
        <div class="flex items-center gap-3">
          <% if (isAdmin) { %>
            <button id="saveBtn" class="bg-emerald-500 hover:bg-emerald-600 text-white font-semibold px-4 py-2 rounded inline-flex items-center gap-2">💾 Salvează</button>
          <% } else { %>
            <button disabled class="bg-slate-700 text-slate-400 font-semibold px-4 py-2 rounded inline-flex items-center gap-2">💾 Salvează</button>
          <% } %>
          <% if (cfg.bannerUrl) { %>
            <a href="<%= cfg.bannerUrl %>" target="_blank" class="text-sky-400 hover:underline text-sm">Deschide banner (URL)</a>
          <% } %>
        </div>
      </div>

      <div class="grid md:grid-cols-2 gap-6">
        <div class="space-y-4">
          <div class="bg-slate-800/40 border border-slate-700 rounded p-4">
            <div class="text-sm text-slate-300 font-medium mb-2">Canale & Mesaje</div>
            <div class="space-y-3">
              <div>
                <label class="block text-xs text-slate-300 mb-1">Canal Welcome</label>
                <% if ((channels || []).length) { %>
                  <select name="welcomeChannelId" class="w-full bg-slate-950 border border-slate-800 rounded px-3 py-2">
                    <% channels.forEach(ch => { %>
                      <option value="<%= ch.id %>" <%= (cfg.welcomeChannelId === ch.id) ? 'selected' : '' %>>#<%= ch.name %></option>
                    <% }) %>
                  </select>
                <% } else { %>
                  <input name="welcomeChannelId" value="<%= cfg.welcomeChannelId || '' %>" class="w-full bg-slate-950 border border-slate-800 rounded px-3 py-2" placeholder="ex: 123456789012345678" />
                <% } %>
              </div>
              <div>
                <label class="block text-xs text-slate-300 mb-1">Canal Goodbye</label>
                <% if ((channels || []).length) { %>
                  <select name="goodbyeChannelId" class="w-full bg-slate-950 border border-slate-800 rounded px-3 py-2">
                    <option value="" <%= (!cfg.goodbyeChannelId ? 'selected' : '') %>>— folosește Welcome —</option>
                    <% channels.forEach(ch => { %>
                      <option value="<%= ch.id %>" <%= (cfg.goodbyeChannelId === ch.id) ? 'selected' : '' %>>#<%= ch.name %></option>
                    <% }) %>
                  </select>
                <% } else { %>
                  <input name="goodbyeChannelId" value="<%= cfg.goodbyeChannelId || '' %>" class="w-full bg-slate-950 border border-slate-800 rounded px-3 py-2" placeholder="opțional, poate fi același" />
                <% } %>
              </div>
              <div>
                <label class="block text-xs text-slate-300 mb-1">Mesaj Welcome</label>
                <input name="welcomeMessage" value="<%= cfg.welcomeMessage || 'Bine ai venit, {user}!' %>" class="w-full bg-slate-950 border border-slate-800 rounded px-3 py-2" />
                <p class="text-xs text-slate-500 mt-1">Folosește {user} pentru a menționa utilizatorul</p>
              </div>
              <div>
                <label class="block text-xs text-slate-300 mb-1">Mesaj Goodbye</label>
                <input name="goodbyeMessage" value="<%= cfg.goodbyeMessage || 'La revedere, {user}!' %>" class="w-full bg-slate-950 border border-slate-800 rounded px-3 py-2" />
                <p class="text-xs text-slate-500 mt-1">Folosește {user} pentru a afișa numele utilizatorului</p>
              </div>
            </div>
          </div>

          <div class="bg-slate-800/40 border border-slate-700 rounded p-4">
            <div class="text-sm text-slate-300 font-medium mb-2">Sursă banner</div>
            <div>
              <label class="block text-xs text-slate-300 mb-1">Banner GIF (URL)</label>
              <input name="bannerUrl" value="<%= cfg.bannerUrl || '' %>" class="w-full bg-slate-950 border border-slate-800 rounded px-3 py-2" placeholder="https://.../banner.gif" />
              <% if (cfg.bannerFile) { %>
                <div class="text-xs text-slate-400 mt-2">Curent: <code class="text-slate-300"><%= cfg.bannerFile %></code></div>
              <% } %>
              <div class="mt-3">
                <% if (isAdmin) { %>
                  <div class="flex items-center gap-2">
                    <input id="bannerFileInput" type="file" accept="image/*" class="text-sm text-slate-200 bg-slate-800/30 rounded px-2 py-1" />
                    <button id="uploadBtn" type="button" class="bg-emerald-500 hover:bg-emerald-600 text-white font-semibold px-3 py-1.5 rounded">📤 Încarcă</button>
                    <span id="uploadStatus" class="text-xs text-slate-400 ml-2"></span>
                  </div>
                <% } else { %>
                  <div class="text-xs text-slate-500">Doar administratori pot încărca bannere.</div>
                <% } %>
              </div>
            </div>
          </div>
        </div>

        <div class="space-y-4">
          <div class="bg-slate-800/40 border border-slate-700 rounded p-4">
            <div class="flex items-center justify-between mb-2">
              <div class="text-sm text-slate-300 font-medium">Acces dashboard</div>
              <div class="text-xs text-slate-400"><%= roles ? roles.length : 0 %> roluri în server</div>
            </div>
            <% if (roles && roles.length) { %>
              <div class="grid gap-2 max-h-44 overflow-auto p-2 bg-slate-800 rounded border border-slate-700">
                <% roles.forEach(r => { %>
                  <label class="inline-flex items-center gap-2 text-sm">
                    <input type="checkbox" name="allowedRoleIds" value="<%= r.id %>" <%= (cfg.allowedRoleIds && cfg.allowedRoleIds.includes(r.id)) ? 'checked' : '' %> <%= isAdmin ? '' : 'disabled' %> class="accent-sky-500" />
                    <span class="truncate"><%= r.name %></span>
                  </label>
                <% }) %>
              </div>
              <p class="text-xs text-slate-500 mt-2">Selectează rolurile cărora le permiți acces la dashboard (în afară de administratori).</p>

              <div class="mt-4">
                <label class="block text-xs text-slate-300 mb-1">Rol automat pentru membri noi</label>
                <select id="autoRoleSelect" name="autoRoleId" class="w-full bg-slate-950 border border-slate-800 rounded px-3 py-2" <%= isAdmin ? '' : 'disabled' %>>
                  <option value="" <%= !cfg.autoRoleId ? 'selected' : '' %>>— niciunul —</option>
                  <% roles.forEach(r => { %>
                    <option value="<%= r.id %>" <%= (cfg.autoRoleId === r.id) ? 'selected' : '' %>><%= r.name %></option>
                  <% }) %>
                </select>
                <p class="text-xs text-slate-500 mt-1">Alege un rol care va fi acordat automat membrilor noi. Asigură-te că botul are permisiunea "Manage Roles" și că rolul botului este mai sus în ierarhie decât rolul selectat.</p>
              </div>
            <% } else { %>
              <p class="text-xs text-slate-500">Nu există roluri disponibile sau nu am putut să le încarc.</p>
            <% } %>
          </div>

          <div class="bg-slate-800/40 border border-slate-700 rounded p-4">
            <div class="text-sm text-slate-300 font-medium mb-2">Instrumente</div>
            <div class="flex flex-col gap-2">
              <% if (isAdmin) { %>
                <button formaction="/guild/<%= guild.id %>/test" formmethod="post" class="bg-indigo-500 hover:bg-indigo-600 text-white font-semibold px-3 py-2 rounded">✉️ Trimite test</button>
              <% } else { %>
                <button disabled class="bg-slate-700 text-slate-400 font-semibold px-3 py-2 rounded">✉️ Trimite test</button>
              <% } %>
              <a href="/guild/<%= guild.id %>/" class="text-xs text-slate-400 hover:underline">Reîmprospătează pagina</a>
            </div>
          </div>
        </div>
      </div>
    </form>

  <!-- Local upload handled in server settings component; removed duplicate upload UI -->

  <!-- Test message UI removed (handled in server settings component) -->

    

    <section class="mt-8 bg-slate-900/60 border border-slate-800 rounded-xl p-6">
      <h2 class="font-semibold mb-4">Previzualizare interactivă</h2>
      <div class="grid md:grid-cols-2 gap-6">
        <div>
          <div class="text-sm text-slate-400 mb-2">Banner generat</div>
          <div id="previewContainer" class="relative w-full aspect-[3/1] bg-slate-950 border border-slate-800 rounded overflow-hidden select-none" data-basegif="<%= baseGifUrl || '' %>">
            <% if (baseGifUrl) { %>
              <img id="baseGif" src="<%= baseGifUrl %>" alt="gif" class="absolute inset-0 w-full h-full object-cover" />
              <img id="overlayImg" src="/api/overlay/<%= guild.id %>" alt="overlay" class="absolute inset-0 w-full h-full object-cover" />
            <% } else { %>
              <img id="previewImg" src="/api/preview/<%= guild.id %>" alt="preview" class="absolute inset-0 w-full h-full object-cover" />
            <% } %>
            <div id="dragOverlay" class="absolute inset-0" style="cursor: move"></div>
          </div>
          <div class="flex items-center gap-3 mt-3">
            <button id="btnReset" <%= isAdmin ? '' : 'disabled' %> class="<%= isAdmin ? 'bg-slate-700 hover:bg-slate-600' : 'bg-slate-800 text-slate-500' %> px-3 py-1.5 rounded">Reset</button>
            <button id="btnPreview" <%= isAdmin ? '' : 'disabled' %> class="<%= isAdmin ? 'bg-sky-600 hover:bg-sky-500' : 'bg-slate-800 text-slate-500' %> px-3 py-1.5 rounded">Preview</button>
            <button id="btnSave" <%= isAdmin ? '' : 'disabled' %> class="<%= isAdmin ? 'bg-emerald-600 hover:bg-emerald-500' : 'bg-slate-800 text-slate-500' %> px-3 py-1.5 rounded">Salvează</button>
            <span id="saveStatus" class="text-xs text-slate-400 hidden">Salvat ✓</span>
          </div>
        </div>
        <div>
          <div class="font-semibold mb-2">Layout</div>
          <div class="mb-4 flex items-center gap-3 text-sm">
            <label for="dragMode" class="text-slate-300">Mod drag:</label>
            <select id="dragMode" class="bg-slate-950 border border-slate-800 rounded px-2 py-1">
              <option value="avatar">Avatar</option>
              <option value="title">Titlu</option>
              <option value="subtitle">Subtitlu</option>
            </select>
          </div>
          <div class="space-y-5">
            <div>
              <div class="text-slate-300 mb-1">Avatar</div>
              <div class="grid grid-cols-3 gap-2 items-center">
                <label class="block text-xs mb-1 col-span-1">Dimensiune</label>
                <input type="range" id="avSize" min="64" max="300" step="1" class="w-full col-span-1" />
                <input type="number" id="avSizeN" min="64" max="300" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-1" />
              </div>
              <div class="grid grid-cols-6 gap-2 mt-2 items-center">
                <label class="block text-xs mb-1">X</label>
                <input type="range" id="avX" min="0" max="1100" step="1" class="w-full col-span-3" />
                <input type="number" id="avXN" min="0" max="1100" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
                <label class="block text-xs mb-1">Y</label>
                <input type="range" id="avY" min="0" max="330" step="1" class="w-full col-span-3" />
                <input type="number" id="avYN" min="0" max="330" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
              </div>
            </div>
            <div>
              <div class="text-slate-300 mb-1">Titlu</div>
              <div class="grid grid-cols-6 gap-2 items-center">
                <label class="block text-xs mb-1">Mărime</label>
                <input type="range" id="titleSize" min="16" max="160" step="1" class="w-full col-span-3" />
                <input type="number" id="titleSizeN" min="16" max="160" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
                <label class="block text-xs mb-1">Y</label>
                <input type="range" id="titleY" min="0" max="400" step="1" class="w-full col-span-3" />
                <input type="number" id="titleYN" min="0" max="400" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
                <label class="block text-xs mb-1">X</label>
                <input type="range" id="titleX" min="0" max="1200" step="1" class="w-full col-span-3" />
                <input type="number" id="titleXN" min="0" max="1200" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
              </div>
              <label class="inline-flex items-center gap-2 mt-2 text-xs"><input type="checkbox" id="titleCenter" class="accent-sky-500" checked /> Centrează pe orizontală</label>
              <div class="grid grid-cols-2 gap-2 mt-2">
                <div>
                  <label class="block text-xs mb-1">Culoare</label>
                  <input type="color" id="titleColor" value="#00E5FF" class="w-full h-8 bg-slate-800 border border-slate-700 rounded" />
                </div>
                <div>
                  <label class="block text-xs mb-1">Contur</label>
                  <input type="color" id="titleStroke" value="#000000" class="w-full h-8 bg-slate-800 border border-slate-700 rounded" />
                </div>
              </div>
            </div>
            <div>
              <div class="text-slate-300 mb-1">Subtitlu</div>
              <div class="grid grid-cols-6 gap-2 items-center">
                <label class="block text-xs mb-1">Mărime</label>
                <input type="range" id="subSize" min="12" max="140" step="1" class="w-full col-span-3" />
                <input type="number" id="subSizeN" min="12" max="140" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
                <label class="block text-xs mb-1">Y</label>
                <input type="range" id="subY" min="0" max="400" step="1" class="w-full col-span-3" />
                <input type="number" id="subYN" min="0" max="400" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
                <label class="block text-xs mb-1">X</label>
                <input type="range" id="subX" min="0" max="1200" step="1" class="w-full col-span-3" />
                <input type="number" id="subXN" min="0" max="1200" step="1" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
              </div>
              <label class="inline-flex items-center gap-2 mt-2 text-xs"><input type="checkbox" id="subCenter" class="accent-sky-500" checked /> Centrează pe orizontală</label>
              <div class="grid grid-cols-2 gap-2 mt-2">
                <div>
                  <label class="block text-xs mb-1">Culoare</label>
                  <input type="color" id="subColor" value="#FFD166" class="w-full h-8 bg-slate-800 border border-slate-700 rounded" />
                </div>
                <div>
                  <label class="block text-xs mb-1">Contur</label>
                  <input type="color" id="subStroke" value="#000000" class="w-full h-8 bg-slate-800 border border-slate-700 rounded" />
                </div>
              </div>
            </div>
            <div>
              <div class="text-slate-300 mb-1">Overlay</div>
              <div class="grid grid-cols-6 gap-2 items-center">
                <label class="block text-xs mb-1">Opacitate (0–0.6)</label>
                <input type="range" id="overlayOpacity" min="0" max="0.6" step="0.02" class="w-full col-span-3" />
                <input type="number" id="overlayOpacityN" min="0" max="0.6" step="0.02" class="w-full bg-slate-950 border border-slate-800 rounded px-2 py-1 col-span-2" />
              </div>
            </div>
          </div>
        </div>
      </div>

      <script>
        const gid = '<%= guild.id %>';
        const baseGifUrl = (document.getElementById('previewContainer')?.dataset?.basegif) || '';
        const img = document.getElementById('previewImg');
        const overlayImg = document.getElementById('overlayImg');
        const q = s => document.getElementById(s);
        const inputs = {
          avSize: q('avSize'), avX: q('avX'), avY: q('avY'),
          avSizeN: q('avSizeN'), avXN: q('avXN'), avYN: q('avYN'),
          titleSize: q('titleSize'), titleY: q('titleY'), titleX: q('titleX'), titleCenter: q('titleCenter'), titleColor: q('titleColor'), titleStroke: q('titleStroke'),
          titleSizeN: q('titleSizeN'), titleYN: q('titleYN'), titleXN: q('titleXN'),
          subSize: q('subSize'), subY: q('subY'), subX: q('subX'), subCenter: q('subCenter'), subColor: q('subColor'), subStroke: q('subStroke'),
          subSizeN: q('subSizeN'), subYN: q('subYN'), subXN: q('subXN'),
          overlayOpacity: q('overlayOpacity')
        };
        const dragMode = q('dragMode');
        const overlay = q('dragOverlay');

        function currentLayout() {
          return {
            avatar: { size: +inputs.avSize.value, x: +inputs.avX.value, y: +inputs.avY.value },
            title: { size: +inputs.titleSize.value, y: +inputs.titleY.value, x: +inputs.titleX.value, center: inputs.titleCenter.checked, color: inputs.titleColor.value, strokeColor: inputs.titleStroke.value, strokeWidth: 3 },
            subtitle: { size: +inputs.subSize.value, y: +inputs.subY.value, x: +inputs.subX.value, center: inputs.subCenter.checked, color: inputs.subColor.value, strokeColor: inputs.subStroke.value, strokeWidth: 2 },
            overlayOpacity: +inputs.overlayOpacity.value
          };
        }

        async function loadLayout() {
          const res = await fetch(`/api/layout/${gid}`);
          const layout = await res.json().catch(() => ({}));
          // Defaults
          const avatar = layout.avatar || { size: 190, x: 80, y: 90 };
          const title = layout.title || { size: 100, y: 205, x: 600, center: true, color: '#00E5FF', strokeColor: '#000000' };
          const subtitle = layout.subtitle || { size: 50, y: 265, x: 600, center: true, color: '#FFD166', strokeColor: '#000000' };
          const overlayOpacity = typeof layout.overlayOpacity === 'number' ? layout.overlayOpacity : 0.20;
          // set ranges
          inputs.avSize.value = avatar.size; inputs.avSizeN.value = avatar.size; inputs.avX.value = avatar.x; inputs.avXN.value = avatar.x; inputs.avY.value = avatar.y; inputs.avYN.value = avatar.y;
          inputs.titleSize.value = title.size; inputs.titleSizeN.value = title.size; inputs.titleY.value = title.y; inputs.titleYN.value = title.y; inputs.titleX.value = title.x ?? 600; inputs.titleXN.value = title.x ?? 600; inputs.titleCenter.checked = !!title.center; inputs.titleColor.value = title.color; inputs.titleStroke.value = title.strokeColor || '#000000';
          inputs.subSize.value = subtitle.size; inputs.subSizeN.value = subtitle.size; inputs.subY.value = subtitle.y; inputs.subYN.value = subtitle.y; inputs.subX.value = subtitle.x ?? 600; inputs.subXN.value = subtitle.x ?? 600; inputs.subCenter.checked = !!subtitle.center; inputs.subColor.value = subtitle.color; inputs.subStroke.value = subtitle.strokeColor || '#000000';
          inputs.overlayOpacity.value = overlayOpacity; inputs.overlayOpacityN.value = overlayOpacity;
          toggleTitleX();
          toggleSubX();
          refreshPreview();
        }

        function toggleTitleX() {
          const centered = inputs.titleCenter.checked;
          inputs.titleX.disabled = centered;
          inputs.titleX.classList.toggle('opacity-50', centered);
        }

        function toggleSubX() {
          const centered = inputs.subCenter.checked;
          inputs.subX.disabled = centered;
          inputs.subX.classList.toggle('opacity-50', centered);
        }

        let _blobUrl;
        let _previewAbort;
        async function refreshPreview() {
          try {
            if (baseGifUrl && overlayImg) {
              if (_previewAbort) { try { _previewAbort.abort(); } catch {} }
              _previewAbort = new AbortController();
              const payload = { layout: currentLayout() };
              const res = await fetch(`/api/overlay/${gid}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'image/*' },
                body: JSON.stringify(payload),
                signal: _previewAbort.signal
              });
              if (!res.ok) throw new Error('overlay failed');
              const blob = await res.blob();
              const url = URL.createObjectURL(blob);
              if (_blobUrl) URL.revokeObjectURL(_blobUrl);
              _blobUrl = url;
              overlayImg.src = url;
            } else if (img) {
              if (_previewAbort) { try { _previewAbort.abort(); } catch {} }
              _previewAbort = new AbortController();
              const payload = { layout: currentLayout() };
              const res = await fetch(`/api/preview/${gid}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'image/*' },
                body: JSON.stringify(payload),
                signal: _previewAbort.signal
              });
              if (!res.ok) throw new Error('preview failed');
              const blob = await res.blob();
              const url = URL.createObjectURL(blob);
              if (_blobUrl) URL.revokeObjectURL(_blobUrl);
              _blobUrl = url;
              img.src = url;
            }
          } catch (e) {
            if (e?.name !== 'AbortError') console.error('Preview error', e);
          }
        }

        async function saveLayout() {
          const btn = document.getElementById('btnSave');
          const status = document.getElementById('saveStatus');
          try {
            btn.disabled = true;
            await fetch(`/api/layout/${gid}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(currentLayout())
            });
            status.textContent = 'Salvat ✓';
            status.classList.remove('hidden');
            clearTimeout(saveLayout._t);
            saveLayout._t = setTimeout(() => status.classList.add('hidden'), 1500);
          } catch (e) {
            status.textContent = 'Eroare la salvare';
            status.classList.remove('hidden');
            clearTimeout(saveLayout._t);
            saveLayout._t = setTimeout(() => status.classList.add('hidden'), 2500);
          } finally {
            btn.disabled = false;
          }
        }

        function onChange() { refreshPreview(); }

        // Link ranges <-> numbers
        function link(a, b) {
          a.addEventListener('input', () => { b.value = a.value; onChange(); });
          b.addEventListener('input', () => { a.value = b.value; onChange(); });
        }
        link(inputs.avSize, inputs.avSizeN); link(inputs.avX, inputs.avXN); link(inputs.avY, inputs.avYN);
        link(inputs.titleSize, inputs.titleSizeN); link(inputs.titleY, inputs.titleYN); link(inputs.titleX, inputs.titleXN);
        link(inputs.subSize, inputs.subSizeN); link(inputs.subY, inputs.subYN); link(inputs.subX, inputs.subXN);
        link(inputs.overlayOpacity, q('overlayOpacityN'));

        // Also listen on ranges individually
        ['avSize','avX','avY','titleSize','titleY','titleX','subSize','subY','subX','overlayOpacity','titleColor','titleStroke','subColor','subStroke'].forEach(id => inputs[id]?.addEventListener('input', onChange));
        inputs.titleCenter.addEventListener('change', () => { toggleTitleX(); onChange(); });
        inputs.subCenter.addEventListener('change', () => { toggleSubX(); onChange(); });
        document.getElementById('btnPreview').addEventListener('click', async (e) => { e.preventDefault(); await refreshPreview(); });
        document.getElementById('btnSave').addEventListener('click', async (e) => { e.preventDefault(); await saveLayout(); });
        // AJAX save for settings form
        const saveBtn = document.getElementById('saveBtn');
        const saveStatus = document.getElementById('saveStatus');
        if (saveBtn) {
          saveBtn.addEventListener('click', async (e) => {
            e.preventDefault();
            try {
              saveBtn.disabled = true;
              const form = saveBtn.closest('form');
              const fd = new FormData(form);
              // include current layout in payload as JSON string under layout
              const layout = currentLayout();
              const payload = {};
              fd.forEach((v, k) => {
                if (k in payload) {
                  if (Array.isArray(payload[k])) payload[k].push(v); else payload[k] = [payload[k], v];
                } else payload[k] = v;
              });
              payload.layout = layout;
              const res = await fetch(form.action, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(payload) });
              if (!res.ok) throw new Error('save failed');
              saveStatus.textContent = 'Salvat ✓'; saveStatus.classList.remove('hidden');
              setTimeout(() => saveStatus.classList.add('hidden'), 1500);
            } catch (err) {
              saveStatus.textContent = 'Eroare la salvare'; saveStatus.classList.remove('hidden');
              setTimeout(() => saveStatus.classList.add('hidden'), 2500);
            } finally { saveBtn.disabled = false; }
          });
        }

        // Auto-role select check
        const autoSelect = document.getElementById('autoRoleSelect');
        if (autoSelect) {
          const hint = document.createElement('div'); hint.className = 'text-xs mt-2'; autoSelect.parentNode.appendChild(hint);
          async function checkRole(roleId) {
            if (!roleId) { hint.textContent = ''; return; }
            hint.textContent = 'Verific...';
            try {
              const res = await fetch(`/guild/${gid}/check-role?roleId=${encodeURIComponent(roleId)}`);
              const j = await res.json();
              if (j.ok) hint.textContent = 'Botul poate atribui acest rol ✅'; else {
                if (j.reason === 'missing_manage_roles') hint.textContent = 'Botul nu are Manage Roles ❌';
                else if (j.reason === 'role_too_high') hint.textContent = 'Rolul este prea sus în ierarhie pentru bot ❌';
                else if (j.reason === 'role_not_found') hint.textContent = 'Rolul nu a fost găsit ❌';
                else hint.textContent = 'Nu se poate verifica rolul ❌';
              }
            } catch (e) { hint.textContent = 'Eroare la verificare'; }
          }
          autoSelect.addEventListener('change', () => checkRole(autoSelect.value));
          // initial check
          checkRole(autoSelect.value);
        }
        document.getElementById('btnReset').addEventListener('click', async (e) => {
          e.preventDefault();
          await fetch(`/api/layout/${gid}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({}) });
          await loadLayout();
        });

  // Test form removed — functionality lives in server settings component

        loadLayout();

        // Drag handling
        let dragging = false;
        overlay.addEventListener('mousedown', (e) => { dragging = true; handleDrag(e); });
        overlay.addEventListener('mousemove', (e) => { if (dragging) handleDrag(e); });
        window.addEventListener('mouseup', () => { dragging = false; });
        function handleDrag(e) {
            const refEl = overlayImg || img;
          const rect = refEl.getBoundingClientRect();
          const rx = (e.clientX - rect.left) / rect.width; // 0..1
          const ry = (e.clientY - rect.top) / rect.height; // 0..1
          const x = Math.max(0, Math.min(1200, Math.round(rx * 1200)));
          const y = Math.max(0, Math.min(400, Math.round(ry * 400)));
          const mode = dragMode.value;
          if (mode === 'avatar') {
            // position avatar top-left (ring), clamp within canvas
            inputs.avX.value = Math.max(0, Math.min(1100, x)); inputs.avXN.value = inputs.avX.value;
            inputs.avY.value = Math.max(0, Math.min(330, y)); inputs.avYN.value = inputs.avY.value;
          } else if (mode === 'title') {
            inputs.titleCenter.checked = false; toggleTitleX();
            inputs.titleX.value = Math.max(0, Math.min(1200, x)); inputs.titleXN.value = inputs.titleX.value;
            inputs.titleY.value = Math.max(0, Math.min(400, y)); inputs.titleYN.value = inputs.titleY.value;
          } else if (mode === 'subtitle') {
            inputs.subCenter.checked = false; toggleSubX();
            inputs.subX.value = Math.max(0, Math.min(1200, x)); inputs.subXN.value = inputs.subX.value;
            inputs.subY.value = Math.max(0, Math.min(400, y)); inputs.subYN.value = inputs.subY.value;
          }
          onChange();
        }

        // Upload handler for banner file (uses FormData POST)
        const fileInput = document.getElementById('bannerFileInput');
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadStatus = document.getElementById('uploadStatus');
        if (uploadBtn && fileInput) {
          uploadBtn.addEventListener('click', async () => {
            const f = fileInput.files && fileInput.files[0];
            if (!f) { uploadStatus.textContent = 'Alege un fișier'; return; }
            uploadBtn.disabled = true; uploadStatus.textContent = 'Încarcă...';
            try {
              const fd = new FormData(); fd.append('bannerFile', f);
              const res = await fetch(`/guild/${gid}/upload`, { method: 'POST', body: fd });
              if (!res.ok) throw new Error('upload failed');
              uploadStatus.textContent = 'Încărcare reușită';
              setTimeout(() => location.reload(), 800);
            } catch (e) {
              console.error('Upload error', e); uploadStatus.textContent = 'Eroare la încărcare';
            } finally { uploadBtn.disabled = false; }
          });
        }
      </script>
    </section>
  </div>
</body>
</html>
